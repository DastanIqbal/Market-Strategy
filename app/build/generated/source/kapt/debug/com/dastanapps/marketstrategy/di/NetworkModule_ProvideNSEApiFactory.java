// Generated by Dagger (https://dagger.dev).
package com.dastanapps.marketstrategy.di;

import com.dastanapps.marketstrategy.network.NSEApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata
@QualifierMetadata("com.dastanapps.marketstrategy.di.NSEAPI")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkModule_ProvideNSEApiFactory implements Factory<NSEApi> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  public NetworkModule_ProvideNSEApiFactory(Provider<OkHttpClient> okHttpClientProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public NSEApi get() {
    return provideNSEApi(okHttpClientProvider.get());
  }

  public static NetworkModule_ProvideNSEApiFactory create(
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NetworkModule_ProvideNSEApiFactory(okHttpClientProvider);
  }

  public static NSEApi provideNSEApi(OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideNSEApi(okHttpClient));
  }
}
